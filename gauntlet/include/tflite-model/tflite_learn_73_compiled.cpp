/*
 * Copyright (c) 2025 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://edgeimpulse.com/legal/terms-of-service) or Enterprise Terms of
 * Service (https://edgeimpulse.com/legal/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 30.06.2025 13:58:05

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#if defined(EI_MODEL_SECTION) && (defined(__GNUC__) || defined(__clang__))
#define MODEL_SECTION(X) __attribute__((section(STRINGIZE_VALUE_OF(X))))
#else
#define MODEL_SECTION(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 1456;
#else
constexpr int kTensorArenaSize = 432;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<2, int> tensor_dimension0 = { 2, { 1,78 } };
const TfArray<1, float> quant0_scale = { 1, { 1.5025900602340698, } };
const TfArray<1, int> quant0_zero = { 1, { -123 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(8) int32_t tensor_data1[3] = { -319, 230, -98, };
const TfArray<1, int> tensor_dimension1 = { 1, { 3 } };
const TfArray<1, float> quant1_scale = { 1, { 0.00065804150654003024, } };
const TfArray<1, int> quant1_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant1 = { (TfLiteFloatArray*)&quant1_scale, (TfLiteIntArray*)&quant1_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data2[3*20] = { 
  52, -1, 84, -110, -42, 67, 92, -114, -127, 77, 52, -53, 47, -124, 29, 7, -43, -109, 4, 55, 
  60, 67, -8, -53, -112, -11, 13, -79, 23, -13, -27, 60, 23, 57, -15, 54, 65, 98, -61, 21, 
  -82, -9, 115, -13, -101, -102, -95, -49, 101, 20, 112, -95, -63, 91, 5, 53, 4, -31, 12, 79, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 3,20 } };
const TfArray<1, float> quant2_scale = { 1, { 0.0042833350598812103, } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&g0::quant1_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data3[20] = { -35, 0, -33, -19, 19, 45, -3, -28, -25, -41, -24, 29, -26, -20, -70, -28, -30, -40, -63, -60, };
const TfArray<1, int> tensor_dimension3 = { 1, { 20 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0012378600658848882, } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&g0::quant1_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data4[20*40] = { 
  53, -49, 63, 74, 7, -1, 31, 45, 34, 37, 48, 31, -71, 36, -30, 37, -57, 59, -13, 61, 24, -33, 9, 3, -3, -64, -9, -18, -17, -96, 33, -17, 31, 5, -48, -34, 56, 34, 21, -6, 
  -77, 49, 54, -30, -54, -52, 36, 73, -45, -36, -13, -81, 72, -58, -59, 66, -28, -4, -33, 12, 18, -17, -67, 43, 75, -80, -24, -5, 15, 27, -15, 35, 79, 65, 57, -92, 66, -12, -71, -5, 
  -20, -2, -49, -18, -43, 18, -22, -36, 71, -77, -43, 6, 81, -21, -7, 9, -40, 21, -21, -57, 76, 73, 70, -69, 75, -44, 68, 76, -47, 36, -62, 71, -10, 89, -74, -48, 4, 85, -16, -17, 
  19, 68, -53, -42, -36, 74, -55, -34, -64, 33, 81, -37, 16, 11, -22, 56, 21, 34, -73, 18, -36, 1, -74, 20, -62, 42, -35, -41, -35, -33, -30, 21, -58, -44, -29, -53, -34, -33, -69, -49, 
  11, -70, -56, -34, -55, 54, -27, 30, -21, 123, -86, 55, -17, -18, 57, 19, -57, 32, -30, 41, -47, 73, -12, -28, 76, -46, 55, 14, -22, 4, -65, -77, -5, -30, 49, 67, -19, 93, 59, 67, 
  -18, -50, -16, -13, -72, 45, -49, -2, 13, 41, -100, 38, -25, -6, 26, -87, 19, 26, -47, 60, 58, -62, -59, -79, -35, 58, -29, 57, 28, 12, 74, -85, 65, 66, 48, -30, 26, 46, 46, 6, 
  86, -42, 72, 8, -8, 41, -51, 5, 44, 83, -17, -2, 56, -44, -70, -27, -3, 34, 13, 95, -11, -10, -22, 40, -54, 50, 67, -11, -83, -27, 11, -80, 27, 87, -37, 44, 25, -59, 38, 59, 
  -38, 34, -22, 71, 65, -33, 46, -107, 23, -20, 14, -32, 47, -16, -80, -23, 57, -64, 7, 38, 89, 46, -61, -41, 49, -76, -16, -57, 72, -32, 92, 89, -107, -79, 68, -9, -62, 46, -24, -5, 
  36, 39, 62, -70, -34, 68, -4, -62, -105, -34, 16, 34, 71, 52, 7, -32, -7, -73, 13, -83, -71, -22, 38, 58, 52, 14, -6, 6, 2, 19, 81, 30, -83, -5, 39, 70, 49, 7, -64, -49, 
  31, -12, 45, -14, 47, -58, -68, 27, -13, 2, 66, -82, 30, -37, 21, 23, -33, -79, -2, -25, 78, -11, -81, -13, -12, -17, 70, 8, -81, -72, 21, 46, -41, -83, -66, -84, 31, 30, -58, 9, 
  -64, 9, 4, -76, -44, 6, 75, -75, -19, 18, -76, 14, 23, 67, 32, 51, -63, -76, -9, -50, 28, -25, -77, 24, 57, -64, 79, -78, -39, 43, -58, 11, 18, 56, 13, -4, 13, -69, 39, -43, 
  -105, 48, -13, -70, 27, -38, 20, 72, 29, -49, -44, 50, 29, -48, -25, -6, -58, -18, 35, -30, 61, 30, 8, -39, 31, 32, -10, 16, 20, -77, -7, 38, -13, -27, 44, -37, -21, -56, 25, -70, 
  -71, 76, -47, 15, -12, 29, -69, -56, -84, -58, 42, -91, -28, 41, 52, 39, 43, 42, 15, 24, -62, 54, 41, -92, 12, -48, 83, -8, -27, -25, -82, 22, -1, 78, 28, -10, -48, -105, -41, -64, 
  -2, 3, 42, -25, 40, 49, -57, -53, -82, 31, 76, -10, -71, 12, 31, 85, 46, 10, 42, -27, 20, -11, 31, 78, 10, 20, 20, 83, -62, 43, 74, -29, -54, -44, 71, -11, 4, -5, 29, 68, 
  91, -31, 36, 11, 33, 18, 10, -106, 69, 125, -32, -67, -49, 44, -37, 23, 5, 42, -47, 44, -42, -18, -58, 24, 8, -41, -14, 44, 8, -37, 7, 52, -29, 127, -50, 4, 0, 16, 60, -11, 
  1, 37, -71, 64, -24, 54, 52, -60, -32, -47, 71, 2, 27, -4, -68, 65, -71, 54, 11, 26, -33, 1, 48, -53, -13, -2, 51, -70, -3, 33, 57, -53, 22, 31, 4, -74, 54, 29, -59, -52, 
  26, -57, 49, -24, -2, 19, -38, -22, -15, -25, -32, -70, 17, 55, 51, 8, -41, -37, -18, -79, 70, 16, -16, 37, -81, -27, 49, -30, -78, 73, -48, -33, 55, 11, 10, 8, 15, 10, -7, -88, 
  55, 44, 56, -80, -22, 70, -28, 25, -6, 10, 34, -44, 62, 83, -42, -13, -55, -63, 72, -30, 47, -30, -61, -53, -33, -81, -57, -80, -32, 28, -52, 64, 7, -23, 9, 19, -78, -5, -87, 36, 
  41, 29, 4, -27, -7, 2, -93, 35, 48, -45, -86, 50, -55, -79, -23, 72, -9, -65, 89, 99, -32, -42, 32, 77, 61, 62, -75, 36, 48, 51, 74, 3, -61, 56, -1, 0, -35, 87, 57, 34, 
  -72, -1, 68, 8, -67, 14, -55, -36, 41, 32, -98, 8, -56, 2, -65, -59, -20, 63, -25, 17, 38, -100, 52, 72, -13, -47, 10, 55, -74, 47, -44, 56, 5, -28, -6, 26, 62, 53, -52, -34, 
};
const TfArray<2, int> tensor_dimension4 = { 2, { 20,40 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0037551848217844963, } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&g0::quant1_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int32_t tensor_data5[40] = { 13, 0, -7, -5, -6, -9, -1, 11, 9, 28, -6, -10, -4, -4, -6, -14, -11, -3, -7, 12, -8, -6, -8, -11, 0, 0, 0, -5, -6, 0, -11, -6, 12, 9, 0, 2, -10, 7, -3, 1, };
const TfArray<1, int> tensor_dimension5 = { 1, { 40 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0062920013442635536, } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&g0::quant1_zero, 0 };
const MODEL_SECTION(EI_MODEL_SECTION) ALIGN(16) int8_t tensor_data6[40*78] = { 
  2, -5, 15, 34, 29, -25, -71, -33, -7, -46, 25, 24, -69, -8, -43, 30, 57, -26, -52, -27, 2, -59, -64, -38, -53, -28, 34, -39, 59, 74, 33, -17, -30, -20, 25, -7, -53, -31, 16, 0, 20, -2, 8, -40, -24, 33, -16, 2, 57, -35, 2, 16, -9, -26, -21, 56, 4, -12, -11, -45, 29, 13, -55, 32, 41, -43, 55, 47, 24, 6, 42, -22, -9, -6, -28, -20, -11, 20, 
  -52, 43, -16, 17, 23, -34, 7, 32, 41, 54, -9, 44, 27, -9, -13, -8, 46, 36, -42, 14, -22, 52, 31, 39, 4, -48, 2, -7, -50, 44, -9, -21, -13, 40, 29, 48, 32, 8, -17, -4, -7, -27, 24, -11, 10, 17, 48, 3, -25, 9, 11, -1, -37, 39, -10, -15, 52, -15, 14, -39, 13, -17, 25, -1, -44, -19, 33, 50, -34, -8, -51, -5, 2, 33, -21, -25, -24, -20, 
  23, -40, 17, 21, 39, -43, -32, -21, 27, 11, 63, 40, 17, 39, -29, -34, 16, -22, -43, 39, 37, -40, 29, -18, 28, 37, -19, 19, -1, -5, 37, -5, -5, 21, -5, 7, 14, 2, -34, -37, 13, 13, -6, -25, -53, -48, 2, 42, 6, 8, -62, -38, 13, 44, -2, -37, -9, -43, 15, -22, -38, 43, 36, 3, -55, 18, 1, 19, -38, 18, -18, 38, -54, -55, -30, 12, -29, 10, 
  -51, -21, 3, -12, 19, 36, 33, 30, -33, 25, -28, -27, 39, -45, 37, -31, 37, 25, 45, 3, -37, 8, 58, 5, 39, -28, -18, 5, -38, -29, 41, 43, -42, 37, -26, 38, -22, 19, -6, 12, 3, 30, -17, -12, 25, 14, -51, 37, -39, 34, -24, 35, -33, 14, 2, -52, -9, -4, -55, 30, -57, -5, -52, -8, 6, -27, -21, -18, -42, -3, 25, 6, 2, -29, -25, -21, 36, -41, 
  35, 17, -51, 35, -35, -5, -23, -27, 41, 5, 4, -1, -7, 29, -56, 15, 37, -27, -7, 21, 15, -37, 39, 49, -1, 43, -50, -23, 25, 37, -55, 58, 13, -13, -42, -36, 46, 32, -8, -35, 44, 16, 8, 0, 26, -29, 4, 6, 1, -49, -21, 3, 39, -55, -48, -44, -40, 10, -30, -38, 39, -40, -54, 41, -33, -26, 13, -22, 18, -57, 7, 25, 27, 32, -54, -15, -27, 16, 
  -17, 38, -54, 8, 10, -66, -78, 4, -37, 1, -24, 12, 56, 33, -34, -45, 51, 50, 59, 21, 32, -19, 34, -18, 22, 71, -13, -13, -21, 24, 22, 2, -55, -69, 7, 23, 14, -73, -26, 31, 13, -68, 2, 52, 38, -10, -48, -13, -19, -14, -21, 29, 1, 1, -6, -3, 50, 22, 11, -1, -67, -55, -12, -22, -40, -4, -6, 7, 15, 44, 16, -13, -7, 32, 31, 26, 4, 23, 
  14, -47, 2, -32, -48, 5, 15, 30, -21, 47, -32, -30, -27, 29, 38, 68, -19, -75, -69, -41, 5, -14, -44, 37, -23, -52, -27, 50, 41, 21, -49, 62, 57, -11, -7, 36, 11, 42, 51, 12, -1, 45, -48, 2, -25, -37, -21, -17, -27, -50, -34, 1, 49, 37, -8, -17, 4, 16, 31, -43, -27, -44, -20, -5, -14, 16, -41, 28, -49, 23, 19, -22, -39, 37, 41, -37, -4, -22, 
  32, -29, 98, 5, -65, 0, -4, -32, -32, -58, 22, -50, -36, -51, -42, 64, -10, -81, -59, 35, -3, 40, -9, -14, -58, -63, 36, 32, 14, 39, -55, 67, 71, 56, 9, -8, 11, 19, 1, -23, -40, 95, 1, -39, 55, 8, 28, -23, -1, 19, 1, 13, 8, 63, 101, -40, -49, 66, 60, 1, 2, 11, 37, -22, 6, 37, -54, -39, -6, -12, 8, 46, 38, 15, 53, 46, 21, 49, 
  40, 26, 2, -16, -44, -13, 38, 14, 21, 45, 40, 42, 23, 36, 49, 69, -39, -120, -73, -37, -22, -44, -60, -29, -37, -60, 103, 62, 58, -11, -8, 55, 17, 66, 56, -6, 23, -3, -24, 3, -104, 18, 33, -59, 51, 24, -28, 59, 62, 37, -23, -11, 24, 71, 74, -37, -52, 58, 36, 60, 48, 9, 33, 14, -41, -27, -72, -30, -35, 2, 60, 53, -25, 41, -35, 58, -18, -13, 
  -56, -40, -7, -12, -41, -85, -94, -73, -43, -3, -51, -30, 11, -2, -13, 11, 0, 63, -3, -53, -32, -70, -63, -7, 4, -14, -81, -30, 70, -7, -25, -78, -42, -92, -77, -74, 4, -51, 6, -34, 51, -2, 1, -16, 71, 90, 24, 35, 18, -24, 50, -28, 4, -60, 90, 54, -28, 93, 83, 63, 56, -16, -26, 46, -21, -23, 4, 14, 86, 25, 88, 58, 41, 67, -45, -45, -20, 52, 
  57, 26, -58, 32, 11, -25, 25, 35, 12, 32, -32, -36, 58, -16, 46, -51, -41, 63, 7, -27, 33, 15, -2, 20, 46, -1, -19, 24, -56, 10, 20, 41, 22, -41, 31, 50, -4, 8, 23, 19, -11, -1, -25, -12, -25, -7, 20, -13, -32, -52, 40, 21, 29, -41, 22, -13, 29, -55, -19, -23, -29, -32, 43, -40, 24, 35, -47, 8, -11, 51, -25, -28, -14, -10, 18, -6, 22, -33, 
  -25, 36, -29, 37, 22, 32, 37, -10, -10, 59, -1, 62, 27, 16, 41, -13, -14, -3, -56, 5, 24, 51, -21, 17, -38, -30, 2, 40, 42, -9, 25, -14, 42, 51, 6, -25, -13, 59, 39, 6, 8, -46, -67, -53, -22, 12, -67, -5, 8, -24, -22, 25, 17, 21, 14, -27, 4, -63, -64, 19, 39, -11, -18, -43, 39, -50, 10, -48, -55, -42, -19, -23, 20, -14, -52, 22, -22, -23, 
  -31, 7, 26, -39, -50, -6, 20, -12, 13, 51, 32, -27, 33, -3, 38, -29, -58, 40, 50, -39, 0, -37, -47, 56, -1, 42, -60, -42, -43, -17, -24, -34, 15, 42, 11, 6, 31, 21, -14, -53, 2, 38, 43, -56, -5, -45, 4, -43, 12, 28, -43, 19, -8, -10, 20, -10, -5, -43, -32, 41, 24, 12, 11, -60, -36, -10, 36, 10, 22, 48, 27, 36, -27, -59, -24, 6, -9, -10, 
  6, -35, 54, -51, -14, 4, 53, -4, -48, -37, -35, 3, -17, -42, -15, 10, -46, -14, 18, 37, 55, 50, 51, 4, 59, 23, -46, 54, 15, 21, -6, -15, 29, 37, 16, -38, 40, 31, -23, 19, -28, -22, 23, 32, -9, -3, -42, -57, -30, -6, 3, 7, -39, 7, -21, 28, -39, -41, 23, 24, -8, -30, 42, -49, 13, -50, 8, -50, 17, -19, 39, 23, -22, 18, 23, -27, -48, -14, 
  38, -21, -6, -34, 15, 60, -37, -44, -39, 39, 54, -18, -42, -17, 49, 43, -33, -15, -34, 51, -45, -42, 1, -11, -43, -2, 7, -50, 40, 36, -11, -24, 16, 54, -1, 14, 57, 55, -14, -11, 25, -46, 1, 32, -55, -34, -18, -55, 36, 39, -53, -37, -55, 25, -29, -33, 43, -59, 42, 31, -32, -9, -38, -3, 48, -28, -11, 28, 40, -52, -27, -27, 27, 9, 21, -26, 34, 22, 
  -22, -29, -76, -25, 5, -32, -32, 41, 29, 37, -30, -24, 31, -44, -30, -4, -40, -24, -12, 30, 50, 36, 60, -26, -17, 45, 16, -4, 22, -60, -19, -15, 10, 26, 22, -27, 61, 41, -3, 24, -58, -21, 32, -15, 8, -24, -11, 29, -66, 6, 19, 29, 15, 18, 27, -5, -73, 9, -40, -24, -51, -28, -2, -53, -37, -29, -10, -53, -48, -7, -50, -44, 22, 29, -25, 5, -44, 11, 
  -18, -8, 27, -34, 5, -40, 23, -7, -30, 36, -32, 34, 35, -27, -31, 7, 25, -33, 28, -12, 12, 22, 8, 55, 10, 18, -28, -25, -25, 17, -54, -25, -29, 11, 10, -33, -16, 52, -13, -48, 25, -69, -19, -10, 32, -12, 31, -10, -14, 28, -26, -28, 30, 9, -22, 14, 23, -67, -34, -49, 8, -51, 32, -24, 30, -28, -20, -52, 20, 35, 26, 13, -46, 32, -20, -47, 20, -21, 
  -24, 19, 76, -37, -10, -24, -3, -25, -33, 49, 28, -40, -29, -48, -9, 21, -19, -29, 27, 29, -44, 51, 6, -3, -49, -34, 60, 38, 77, -23, -4, 39, 17, 36, 48, 66, 56, 46, -22, 28, -81, -10, 10, -52, 7, -4, -53, 34, 16, 42, 40, -2, -36, 5, 40, -65, 10, -40, 34, -30, -36, 9, -4, 20, 46, 17, -57, 11, 40, -8, -59, -55, 23, 10, 40, 20, -58, 10, 
  -55, 37, 18, -46, -13, -38, -35, -29, 15, -18, -15, -18, -12, -14, -46, 17, -45, 41, 26, -30, -28, -21, 13, 65, -31, 14, 13, 44, -44, -26, -16, -24, 38, 58, 14, 44, 51, -39, 59, -27, 20, 36, 15, 36, -14, -63, 21, -49, 31, 57, -44, 20, -38, -19, -4, -47, -61, -42, 12, -53, 56, -3, 26, 0, 14, -59, -5, -19, 3, -30, 26, -20, 33, 8, 0, 9, 56, 10, 
  11, -1, 15, 35, 58, -58, 21, -16, -17, -44, -36, 26, -19, -27, 7, -11, 63, 22, -66, -14, -53, -2, -16, -66, -22, -3, -37, 51, 54, -17, -20, -55, -57, -25, -55, -67, -32, -28, -61, -27, 63, 23, 6, 63, 38, -26, -8, 42, -14, 71, 2, 55, 2, -38, 36, 67, -38, 45, 19, 2, 73, 37, 24, -39, -18, -19, 69, 39, 41, -15, 43, 42, 27, -9, 14, -27, 11, 26, 
  -19, 31, 43, -47, -56, 9, -22, 60, 50, -14, -2, 21, 45, -38, -56, 13, -57, 9, 27, -34, 5, -5, 54, 56, -28, -39, -22, 26, 56, 19, -34, -46, -35, 29, 6, -33, -2, -17, 37, 32, -14, 19, -6, -20, -61, -24, 33, -62, 16, -32, -65, 15, -34, 15, -20, 2, 20, 37, 6, 5, -11, 37, -21, -9, -19, -43, 1, -39, 39, -11, -13, -45, -22, 14, -39, 19, 19, -31, 
  -12, 33, -20, 14, 56, 3, -8, -38, 23, -29, -2, -7, 31, 41, -56, 19, 57, 2, 4, -35, -36, 38, -9, -29, 9, 1, -42, -78, 13, -46, 41, -33, -22, -71, -26, -40, -11, 36, -37, 44, -38, -30, 7, -21, -23, 5, 1, 19, -53, -57, 41, -18, 11, -67, -36, -46, 32, 35, 0, -49, -61, -39, -15, 9, 38, -24, -7, 18, -21, 41, -2, -33, 22, 15, -41, -28, -30, 27, 
  -17, -36, -38, 33, -14, 20, 37, 48, 43, 34, -38, -30, -2, 15, -40, 26, -50, -29, 8, -29, 39, 2, 1, -31, -2, -1, -12, -49, -1, -26, -28, 20, 42, -19, -6, -41, 56, -34, 40, -43, -28, -12, -2, -11, -12, 33, -31, 25, 21, 19, -41, -35, -32, 42, -19, 17, -51, -55, 43, 13, 41, -44, 53, 45, 7, -43, 17, 14, 29, 11, 35, 36, -10, -5, 0, -32, 15, 56, 
  23, 42, 3, 46, -33, 43, 37, 2, -4, 54, 43, 1, 47, 33, 30, 11, -29, 16, -35, 51, 49, 62, -13, -9, 49, 24, -73, -66, -79, -17, 17, 26, -52, -43, -43, -19, -29, 29, 64, 41, 45, -42, -50, -10, -37, 2, -8, -36, -24, -26, -18, -46, -15, -39, -13, 0, 48, 32, -13, -18, 28, 4, -11, -45, 3, -55, 48, -35, 3, 43, 21, -34, -2, -49, -53, -46, 35, 6, 
  11, -34, -40, -13, 31, 10, -24, 29, 35, -12, 49, -9, 2, 36, -42, -35, -38, -26, -49, 31, 16, -19, -33, 32, 36, 38, -14, 51, 41, 31, -43, 49, 30, 52, -13, 14, 18, 25, -15, -21, -51, -38, -31, -38, -19, 2, 35, 1, -12, -42, -47, -16, -28, -13, 17, -3, -2, -5, -36, -7, -15, -7, 3, -41, 21, -9, -10, -12, 27, 38, 8, 5, -51, 9, -47, 25, -35, 53, 
  49, 18, -69, 61, 30, -25, 9, -6, 14, 7, -41, -24, -12, 10, 52, -35, -19, -23, -8, 36, 8, -15, -48, -32, 40, -2, -37, 11, -40, 9, -39, -69, -39, 12, 4, -41, -55, -50, -23, 8, 50, 12, -29, 21, -10, 2, 40, -6, 18, 33, 17, -30, 10, -82, 24, 5, 54, 8, -42, -35, 28, 7, 49, -20, -49, 21, 2, 58, -39, 54, 0, -29, -31, 49, -26, 13, -49, -4, 
  -15, -29, -52, 38, 4, -4, 31, -8, -27, 41, 10, 34, -5, -44, 14, -49, -7, 31, 22, 53, 12, 2, -46, -29, -11, 44, 33, -6, 44, -19, 5, -32, 14, 34, -29, 47, 25, 32, 42, -23, 33, 16, -15, 14, -23, 33, 49, -51, -32, -5, -31, -15, -8, -36, -2, 29, -53, -12, -21, -18, 11, 0, -43, 23, -45, -50, 25, 42, 24, 53, 31, -53, 6, -47, 34, 44, 45, -49, 
  -62, 59, 1, 16, 43, 39, 3, -55, -25, 53, -28, 5, 56, 9, -18, 37, -50, -47, 7, -33, 13, 57, 3, -36, 36, -4, -4, -49, 20, -58, -18, -54, -8, -27, 53, 9, 23, 11, 33, 19, -48, -19, -55, 24, -27, -54, -39, -31, -54, 41, 24, -55, -27, -59, -37, -49, 23, -30, -18, 12, 6, -52, 12, -52, -17, -12, 5, 27, -18, -7, 23, 34, 24, -48, 2, -30, 22, 5, 
  39, -10, 33, -32, -1, 22, -38, -38, -31, 6, 32, 17, 30, -14, -65, -74, 0, -7, 39, -4, -37, -29, 12, -9, 12, -56, -52, 19, 27, -23, -8, -33, -65, 24, -39, -26, -51, -55, -32, 31, -21, -34, 7, 23, 17, -61, -25, -16, 2, -41, -44, 12, 23, -7, -12, 35, 33, 39, -46, -27, 30, -27, -60, 40, 28, 31, -9, 2, 44, 50, -13, -40, -5, -48, -41, 20, -46, 20, 
  39, 26, -2, 15, -20, -37, -22, 39, 34, -27, 40, 57, 44, 43, 34, -39, 16, 52, 76, 22, 18, 20, -40, 31, -31, 62, -68, -17, -33, 22, -14, 17, -49, -56, -8, 13, -20, -60, -37, 48, 107, -66, 57, 7, 10, 19, -8, 48, -48, -22, -40, -18, 0, -75, -2, -15, 12, 33, 28, 24, -53, 46, 24, -17, 20, -21, 19, 23, 6, -32, -36, -1, 19, -5, -5, -48, -41, -44, 
  3, -44, -44, 6, 38, 12, -53, -24, 18, 31, 46, 62, 10, -18, 23, -62, -14, 64, -31, 24, 5, 4, 66, -23, 47, -6, -27, 21, -49, -17, 25, 21, -63, 20, 16, 12, -15, 56, -24, 40, -14, -66, 29, 29, -44, 32, -44, -13, 4, 11, 18, 7, -37, -91, -33, -4, 41, -9, 29, -47, -60, -53, 11, -2, -62, -34, -49, 5, -57, 40, -54, -1, -67, -35, -37, 14, 31, -44, 
  7, 13, -78, -19, 11, 23, 1, 6, -20, 4, -6, 7, 29, 30, 0, -43, -15, 18, 27, 25, 33, 2, -1, 42, 13, 53, -11, 5, -35, -45, 39, -45, -11, -47, -31, -12, -41, 7, 36, 3, 77, -61, -43, 54, 24, -55, -52, 4, 25, -24, -13, 27, 5, 15, -77, 13, 43, -49, -9, 4, 33, -22, -26, -52, 25, 20, 1, -8, 37, 41, -3, 9, -63, -35, -38, -44, -9, 8, 
  -44, -32, -25, -40, 28, -55, 13, 24, -37, -34, 9, 13, -36, -32, -38, 3, 58, 32, -64, -51, -7, -47, -44, 8, 31, -71, 51, -30, 34, 43, -17, 39, 10, 16, 30, -32, 26, -61, 33, -46, -10, 46, 50, -43, 50, 66, 25, -32, 21, -1, 43, 30, -16, 64, 9, -5, -32, 31, 3, 48, 15, -8, 41, 47, 63, 37, -10, 43, 14, 66, 28, 1, 1, 51, -37, -25, 32, 65, 
  -50, -5, 62, 65, 26, -2, 0, -52, -23, -34, -56, -31, -68, 50, -4, -37, -38, 24, -19, -32, 10, -54, -41, 15, 18, 10, -25, -27, 52, 0, -21, -59, 24, 26, 34, -26, -27, -56, -42, -26, 26, -9, 22, 59, -42, 22, 32, -44, 41, -37, 35, -51, 24, -9, 35, -35, 30, 38, -21, -57, -34, -32, -6, 25, 29, -40, 14, -37, -8, 53, 3, -39, 41, -37, 39, -51, -53, 37, 
  -45, 10, -32, 18, 18, -53, 52, -21, 7, -42, 52, 39, -32, -44, -15, -29, 33, -36, 12, -49, 43, 34, 32, -35, -23, 23, -10, -35, -13, -30, 22, 48, 48, 33, 28, -33, -22, 25, 13, 4, 6, -25, -43, 4, 10, 16, 30, -2, 41, 54, 49, 39, -19, -48, -31, -1, 28, 32, -46, 44, -7, -32, -42, 50, -36, -32, -2, 28, 24, 43, 20, -27, 36, -33, 38, -38, 35, -30, 
  68, -34, -28, 28, 58, 14, 16, 37, 26, 38, 51, 29, 7, 15, -17, -36, 57, 67, -16, 32, -49, -45, -26, -13, 40, 0, 23, -61, -16, 54, -13, -60, -21, -85, -14, 4, 9, 2, -25, 28, 39, 11, 63, 77, 53, 51, 33, 36, 27, 26, 46, -17, -26, -56, -26, -25, 62, -35, -46, -6, 12, -17, -10, -22, -38, -6, 91, 14, -10, 18, 19, 0, 10, 8, -41, -18, 42, 24, 
  -60, -53, 53, -66, -87, -25, 45, 38, -18, -14, -27, -18, -14, 6, 36, 43, -66, -77, -83, 5, 12, 48, -44, -51, -23, -7, -31, -25, 53, -60, 15, 21, 73, 29, 89, 23, 77, 59, 45, -9, -12, 49, 6, -78, -27, 40, -3, -38, -31, -39, -22, -21, 23, 127, 24, -15, -96, 5, 34, -58, -21, -21, -4, -62, 34, 21, -34, -12, -59, -78, -29, -38, 3, 17, -7, -25, 8, -40, 
  33, 42, -11, 58, 15, 14, 8, -34, 7, -42, -34, 42, -54, 30, -42, -16, 14, 46, -50, -58, -27, -23, -42, 43, 18, -39, 33, -37, -41, -18, -47, 17, 4, -15, -31, -34, 32, -1, -56, -24, -43, 21, 57, 19, 33, 62, -16, 39, -9, -38, 33, -22, -44, 49, -38, -19, -2, 24, 60, 0, 56, 54, 30, 52, 53, 35, 57, 14, 44, 2, -41, 45, 8, 31, 5, 54, -31, -5, 
  -23, -52, 20, -12, -28, -39, -64, -50, -47, 9, 36, 32, -56, -24, -45, -30, -54, 36, -54, -41, -17, 1, -28, -5, -65, -63, -40, -46, -16, 32, -36, 24, -51, -71, 31, 13, -40, 3, -2, 9, 13, -5, 3, -3, -51, 34, -26, -48, 3, -42, 43, -4, -8, -32, 30, 0, -37, -48, 14, -56, -39, 0, 42, -32, -6, -34, -12, -34, 46, 9, -24, -30, 31, 8, -23, 11, 14, -36, 
  33, -22, -15, -7, 30, 36, -6, -25, -49, 11, -52, -46, -2, -31, 28, 4, -30, 25, 6, -13, -43, 26, -47, 11, -1, 21, 9, -28, -46, 47, 38, 11, -13, -43, -37, 31, -12, 14, -57, -30, 5, -43, 22, -3, 1, 9, -11, -45, -39, -32, 40, -41, 25, -24, 45, 38, -41, 6, -30, -4, 7, -30, 32, -1, -1, -5, 40, 62, 42, -27, -33, 16, 43, 43, 21, 27, -19, -47, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 40,78 } };
const TfArray<1, float> quant6_scale = { 1, { 0.0041874372400343418, } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&g0::quant1_zero, 0 };
const TfArray<2, int> tensor_dimension7 = { 2, { 1,40 } };
const TfArray<1, float> quant7_scale = { 1, { 0.32964023947715759, } };
const TfArray<1, int> quant7_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const TfArray<2, int> tensor_dimension8 = { 2, { 1,20 } };
const TfArray<1, float> quant8_scale = { 1, { 0.15362830460071564, } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&g0::quant7_zero, 0 };
const TfArray<2, int> tensor_dimension9 = { 2, { 1,3 } };
const TfArray<1, float> quant9_scale = { 1, { 0.19343958795070648, } };
const TfArray<1, int> quant9_zero = { 1, { 22 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const TfArray<1, float> quant10_scale = { 1, { 0.00390625, } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&g0::quant7_zero, 0 };
const TfLiteFullyConnectedParams opdata0 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs0 = { 3, { 0,6,5 } };
const TfArray<1, int> outputs0 = { 1, { 7 } };
const TfLiteFullyConnectedParams opdata1 = { kTfLiteActRelu, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs1 = { 3, { 7,4,3 } };
const TfArray<1, int> outputs1 = { 1, { 8 } };
const TfLiteFullyConnectedParams opdata2 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs2 = { 3, { 8,2,1 } };
const TfArray<1, int> outputs2 = { 1, { 9 } };
const TfLiteSoftmaxParams opdata3 = { 1 };
const TfArray<1, int> inputs3 = { 1, { 9 } };
const TfArray<1, int> outputs3 = { 1, { 10 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 78, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 12, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant1))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 60, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant2))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 80, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 160, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 3120, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 80), (TfLiteIntArray*)&g0::tensor_dimension7, 40, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension8, 20, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 32), (TfLiteIntArray*)&g0::tensor_dimension9, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension9, 3, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[4] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_FULLY_CONNECTED, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 11, };
const size_t tflNodes_subgraph_index[] = {0, 4, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  10, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_73_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 11;
  for (size_t i = 0; i < 11; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_73_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_73_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_73_invoke() {
  for (size_t i = 0; i < 4; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_73_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
